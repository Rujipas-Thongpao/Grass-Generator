#pragma kernel ComputePosition
#include "./noise.compute"

#define Rad2Deg  0.0174532925;

struct VegetationData{
    float3 position;
    float noise;
    float3 wind;
    float angle;
    float2 groundUV;
};

RWStructuredBuffer<VegetationData> _Buffer;
int _amountPerRow;
float _density;
float _noiseScale;
float _time;
float4 _windDirection;
float _windStrength;

[numthreads(8,1,1)]
void ComputePosition(uint3 id : SV_DispatchThreadID)
{
    VegetationData veg;
    veg.position = float3(0.,0.,0.);
    veg.noise = 0.5;
    veg.wind = float3(0.,0.,0.);
    veg.angle = 0.0;
    veg.groundUV = float2(0.,0.);

    int x = id.x % _amountPerRow;
    int z = id.x / _amountPerRow;

    // add noise
    float2 uv = float2(x, z) / _amountPerRow;

    float r = unity_noise_randomValue(uv);
    float n; Unity_SimpleNoise_float(uv , _noiseScale, n);

    float np = n*2.0-1.0;
    float rp = r*2.0-1.0;

    veg.noise = n;
    veg.position = float3(x,0.0,z);
    veg.position -= float3(_amountPerRow/2,0.0,_amountPerRow/2);

    veg.position += float3(rp + np,0., rp + np) * 10;
    veg.position *=  1/(_density);
    veg.position.y = 0.;

    float wind;
    Unity_GradientNoise_float( uv+ (-normalize(_windDirection) * _time/10), 10, wind);
    veg.wind = wind * _windDirection * _windStrength;

    float angle = (unity_noise_randomValue(uv) * 2. - 1.) * 3.14; // 0 - 1
    veg.angle = angle;

    veg.groundUV = float2(300-veg.position.x, 300-veg.position.z)/600;
    
    _Buffer[id.x] = veg;
}
